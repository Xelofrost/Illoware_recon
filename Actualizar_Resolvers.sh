#!/bin/bash
set -euo pipefail

TOOLS_DIR="$(pwd)/tools"
RESOLVERS_FILE="$TOOLS_DIR/resolvers.txt"

# Funci√≥n para mostrar mensaje de finalizaci√≥n
show_completion() {
    echo -e "\n[‚úÖ] Proceso completado exitosamente a las $(date +'%T')"
    echo "--------------------------------------------------"
}

# Funci√≥n para instalar dnsvalidator (compatible con Kali Linux)
install_dnsvalidator() {
    echo "[üîß] Instalando dnsvalidator..."
    
    # Instalar dependencias necesarias
    echo "[üì¶] Instalando python3-venv..."
    sudo apt-get install -y python3-venv > /dev/null 2>&1
    
    # Clonar repositorio
    echo "[üì•] Clonando dnsvalidator..."
    git clone https://github.com/vortexau/dnsvalidator.git "$TOOLS_DIR/dnsvalidator" > /dev/null 2>&1
    
    # Crear y activar entorno virtual
    echo "[üêç] Creando entorno virtual..."
    cd "$TOOLS_DIR/dnsvalidator"
    python3 -m venv .venv
    source .venv/bin/activate
    
    # Instalar dentro del entorno virtual
    echo "[‚öôÔ∏è] Instalando dependencias..."
    pip install . > /dev/null 2>&1
    
    # Crear enlace simb√≥lico global
    echo "[üîó] Creando enlace simb√≥lico..."
    sudo ln -sf "$TOOLS_DIR/dnsvalidator/.venv/bin/dnsvalidator" /usr/local/bin/
    
    # Desactivar entorno
    deactivate
    cd - >/dev/null
    
    echo "[‚ö°] dnsvalidator instalado en entorno virtual"
}

# Funci√≥n principal de actualizaci√≥n
update_resolvers() {
    echo -e "\n[üåê] Iniciando actualizaci√≥n de resolvers DNS"
    echo "--------------------------------------------------"
    mkdir -p "$TOOLS_DIR"

    # Verificar dnsvalidator
    if ! command -v dnsvalidator >/dev/null 2>&1; then
        install_dnsvalidator
    else
        echo "[üîç] dnsvalidator ya est√° instalado"
    fi

    # Generar lista
    echo "[üîÑ] Generando nueva lista de resolvers..."
    dnsvalidator -tL https://public-dns.info/nameservers.txt -threads 50 -o "$RESOLVERS_FILE.tmp"

    # A√±adir resolvers de respaldo
    echo "[üì¶] A√±adiendo resolvers de confianza..."
    {
        echo -e "\n# Resolvers de respaldo"
        echo -e "8.8.8.8\t# Google DNS"
        echo -e "1.1.1.1\t# Cloudflare DNS" 
        echo -e "9.9.9.9\t# Quad9 DNS"
    } >> "$RESOLVERS_FILE.tmp"

    # Filtrar y validar
    echo "[üßπ] Filtrando IPs v√°lidas..."
    awk 'NF && $0!~/[^0-9.]/' "$RESOLVERS_FILE.tmp" | sort -u > "$RESOLVERS_FILE.tmp2"

    # Verificaci√≥n final
    if [[ $(wc -l < "$RESOLVERS_FILE.tmp2") -ge 100 ]]; then
        mv "$RESOLVERS_FILE.tmp2" "$RESOLVERS_FILE"
        echo -e "\n[üìä] Estad√≠sticas finales:"
        echo "---------------------------------"
        echo "‚Ä¢ Total resolvers: $(wc -l < "$RESOLVERS_FILE")"
        echo "‚Ä¢ Top 5 m√°s r√°pidos:"
        head -n 5 "$RESOLVERS_FILE" | awk '{print "  ‚Üí "$0}'
        show_completion
    else
        echo -e "\n[‚ùå] Error cr√≠tico: Lista insuficiente"
        echo "‚Ä¢ Se requieren m√≠nimo 100 resolvers"
        echo "‚Ä¢ Se encontraron: $(wc -l < "$RESOLVERS_FILE.tmp2")"
        exit 1
    fi

    # Limpieza
    rm -f "$RESOLVERS_FILE".tmp*
}

# Ejecuci√≥n principal corregida
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo -e "\nüõ†Ô∏è  Script de actualizaci√≥n de resolvers DNS"
    echo "=================================================="
    update_resolvers
    echo -e "\n[‚ÑπÔ∏è]  Usa esta lista en tu script principal con:"
    echo "     $RESOLVERS_FILE"
fi